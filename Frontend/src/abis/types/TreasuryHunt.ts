/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace TreasuryHunt {
  export type LotteryStruct = {
    randomNumber: PromiseOrValue<BigNumberish>;
    winner: PromiseOrValue<string>;
    tickets: PromiseOrValue<string>[];
  };

  export type LotteryStructOutput = [BigNumber, string, string[]] & {
    randomNumber: BigNumber;
    winner: string;
    tickets: string[];
  };
}

export interface TreasuryHuntInterface extends utils.Interface {
  functions: {
    "DEFAULT_FEE_INCREASE_DURATION()": FunctionFragment;
    "DEFAULT_GAME_DURATION()": FunctionFragment;
    "FEE_TOKEN_DECIMAL()": FunctionFragment;
    "PRIZE_DISTRIBUTION_GAME_CREATOR()": FunctionFragment;
    "PRIZE_DISTRIBUTION_LOTTERY()": FunctionFragment;
    "PRIZE_DISTRIBUTION_TOKEN_STACKERS()": FunctionFragment;
    "PRIZE_DISTRIBUTION_TREASURY()": FunctionFragment;
    "PRIZE_TOKEN_DECIMAL()": FunctionFragment;
    "claimCreatorReward(uint256)": FunctionFragment;
    "claimLotteryReward(uint256)": FunctionFragment;
    "claimWinnerPrize(uint256)": FunctionFragment;
    "createGame(uint256)": FunctionFragment;
    "creatorRewardList(address,uint256)": FunctionFragment;
    "endGame(uint256)": FunctionFragment;
    "feeToken()": FunctionFragment;
    "gameIdCounter()": FunctionFragment;
    "games(uint256)": FunctionFragment;
    "getGameParticipantList(uint256,uint256,uint256)": FunctionFragment;
    "getLotteryInfo(uint256)": FunctionFragment;
    "initFeeAmount()": FunctionFragment;
    "joinGame(uint256)": FunctionFragment;
    "lotteryRewardList(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "prizeToken()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "stakingPool()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "userParticipationAmount(address,uint256)": FunctionFragment;
    "winnerPrizeList(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_FEE_INCREASE_DURATION"
      | "DEFAULT_GAME_DURATION"
      | "FEE_TOKEN_DECIMAL"
      | "PRIZE_DISTRIBUTION_GAME_CREATOR"
      | "PRIZE_DISTRIBUTION_LOTTERY"
      | "PRIZE_DISTRIBUTION_TOKEN_STACKERS"
      | "PRIZE_DISTRIBUTION_TREASURY"
      | "PRIZE_TOKEN_DECIMAL"
      | "claimCreatorReward"
      | "claimLotteryReward"
      | "claimWinnerPrize"
      | "createGame"
      | "creatorRewardList"
      | "endGame"
      | "feeToken"
      | "gameIdCounter"
      | "games"
      | "getGameParticipantList"
      | "getLotteryInfo"
      | "initFeeAmount"
      | "joinGame"
      | "lotteryRewardList"
      | "owner"
      | "prizeToken"
      | "renounceOwnership"
      | "stakingPool"
      | "transferOwnership"
      | "treasury"
      | "userParticipationAmount"
      | "winnerPrizeList"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_FEE_INCREASE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_GAME_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_TOKEN_DECIMAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRIZE_DISTRIBUTION_GAME_CREATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRIZE_DISTRIBUTION_LOTTERY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRIZE_DISTRIBUTION_TOKEN_STACKERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRIZE_DISTRIBUTION_TREASURY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRIZE_TOKEN_DECIMAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimCreatorReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimLotteryReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWinnerPrize",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createGame",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorRewardList",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "endGame",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "feeToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gameIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "games",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameParticipantList",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLotteryInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initFeeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "joinGame",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lotteryRewardList",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prizeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userParticipationAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "winnerPrizeList",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_FEE_INCREASE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_GAME_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_TOKEN_DECIMAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRIZE_DISTRIBUTION_GAME_CREATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRIZE_DISTRIBUTION_LOTTERY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRIZE_DISTRIBUTION_TOKEN_STACKERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRIZE_DISTRIBUTION_TREASURY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRIZE_TOKEN_DECIMAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCreatorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimLotteryReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimWinnerPrize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creatorRewardList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gameIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGameParticipantList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLotteryInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lotteryRewardList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prizeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userParticipationAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "winnerPrizeList",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TreasuryHunt extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TreasuryHuntInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_FEE_INCREASE_DURATION(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    DEFAULT_GAME_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    FEE_TOKEN_DECIMAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRIZE_DISTRIBUTION_GAME_CREATOR(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    PRIZE_DISTRIBUTION_LOTTERY(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRIZE_DISTRIBUTION_TOKEN_STACKERS(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    PRIZE_DISTRIBUTION_TREASURY(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    PRIZE_TOKEN_DECIMAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimCreatorReward(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimLotteryReward(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimWinnerPrize(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createGame(
      _prizeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    creatorRewardList(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        gameId: BigNumber;
        isClaimed: boolean;
        amount: BigNumber;
      }
    >;

    endGame(
      _gameId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeToken(overrides?: CallOverrides): Promise<[string]>;

    gameIdCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    games(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        TreasuryHunt.LotteryStructOutput
      ] & {
        isSettled: boolean;
        gameId: BigNumber;
        creator: string;
        prizeAmount: BigNumber;
        totalFeeAmount: BigNumber;
        startTime: BigNumber;
        deadline: BigNumber;
        winner: string;
        lottery: TreasuryHunt.LotteryStructOutput;
      }
    >;

    getGameParticipantList(
      _gameId: PromiseOrValue<BigNumberish>,
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getLotteryInfo(
      _gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        randomNumber: BigNumber;
        participantCount: BigNumber;
        winner: string;
      }
    >;

    initFeeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    joinGame(
      _gameId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lotteryRewardList(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        gameId: BigNumber;
        isClaimed: boolean;
        amount: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    prizeToken(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakingPool(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    userParticipationAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    winnerPrizeList(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        gameId: BigNumber;
        isClaimed: boolean;
        amount: BigNumber;
      }
    >;
  };

  DEFAULT_FEE_INCREASE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_GAME_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  FEE_TOKEN_DECIMAL(overrides?: CallOverrides): Promise<BigNumber>;

  PRIZE_DISTRIBUTION_GAME_CREATOR(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  PRIZE_DISTRIBUTION_LOTTERY(overrides?: CallOverrides): Promise<BigNumber>;

  PRIZE_DISTRIBUTION_TOKEN_STACKERS(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  PRIZE_DISTRIBUTION_TREASURY(overrides?: CallOverrides): Promise<BigNumber>;

  PRIZE_TOKEN_DECIMAL(overrides?: CallOverrides): Promise<BigNumber>;

  claimCreatorReward(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimLotteryReward(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimWinnerPrize(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createGame(
    _prizeAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  creatorRewardList(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber] & {
      gameId: BigNumber;
      isClaimed: boolean;
      amount: BigNumber;
    }
  >;

  endGame(
    _gameId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeToken(overrides?: CallOverrides): Promise<string>;

  gameIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

  games(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      TreasuryHunt.LotteryStructOutput
    ] & {
      isSettled: boolean;
      gameId: BigNumber;
      creator: string;
      prizeAmount: BigNumber;
      totalFeeAmount: BigNumber;
      startTime: BigNumber;
      deadline: BigNumber;
      winner: string;
      lottery: TreasuryHunt.LotteryStructOutput;
    }
  >;

  getGameParticipantList(
    _gameId: PromiseOrValue<BigNumberish>,
    _start: PromiseOrValue<BigNumberish>,
    _end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getLotteryInfo(
    _gameId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      randomNumber: BigNumber;
      participantCount: BigNumber;
      winner: string;
    }
  >;

  initFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  joinGame(
    _gameId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lotteryRewardList(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber] & {
      gameId: BigNumber;
      isClaimed: boolean;
      amount: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  prizeToken(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakingPool(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  userParticipationAmount(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  winnerPrizeList(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber] & {
      gameId: BigNumber;
      isClaimed: boolean;
      amount: BigNumber;
    }
  >;

  callStatic: {
    DEFAULT_FEE_INCREASE_DURATION(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DEFAULT_GAME_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_TOKEN_DECIMAL(overrides?: CallOverrides): Promise<BigNumber>;

    PRIZE_DISTRIBUTION_GAME_CREATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PRIZE_DISTRIBUTION_LOTTERY(overrides?: CallOverrides): Promise<BigNumber>;

    PRIZE_DISTRIBUTION_TOKEN_STACKERS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PRIZE_DISTRIBUTION_TREASURY(overrides?: CallOverrides): Promise<BigNumber>;

    PRIZE_TOKEN_DECIMAL(overrides?: CallOverrides): Promise<BigNumber>;

    claimCreatorReward(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimLotteryReward(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimWinnerPrize(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createGame(
      _prizeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    creatorRewardList(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        gameId: BigNumber;
        isClaimed: boolean;
        amount: BigNumber;
      }
    >;

    endGame(
      _gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeToken(overrides?: CallOverrides): Promise<string>;

    gameIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    games(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        TreasuryHunt.LotteryStructOutput
      ] & {
        isSettled: boolean;
        gameId: BigNumber;
        creator: string;
        prizeAmount: BigNumber;
        totalFeeAmount: BigNumber;
        startTime: BigNumber;
        deadline: BigNumber;
        winner: string;
        lottery: TreasuryHunt.LotteryStructOutput;
      }
    >;

    getGameParticipantList(
      _gameId: PromiseOrValue<BigNumberish>,
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getLotteryInfo(
      _gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        randomNumber: BigNumber;
        participantCount: BigNumber;
        winner: string;
      }
    >;

    initFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    joinGame(
      _gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    lotteryRewardList(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        gameId: BigNumber;
        isClaimed: boolean;
        amount: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    prizeToken(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    stakingPool(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    userParticipationAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    winnerPrizeList(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        gameId: BigNumber;
        isClaimed: boolean;
        amount: BigNumber;
      }
    >;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    DEFAULT_FEE_INCREASE_DURATION(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DEFAULT_GAME_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_TOKEN_DECIMAL(overrides?: CallOverrides): Promise<BigNumber>;

    PRIZE_DISTRIBUTION_GAME_CREATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PRIZE_DISTRIBUTION_LOTTERY(overrides?: CallOverrides): Promise<BigNumber>;

    PRIZE_DISTRIBUTION_TOKEN_STACKERS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PRIZE_DISTRIBUTION_TREASURY(overrides?: CallOverrides): Promise<BigNumber>;

    PRIZE_TOKEN_DECIMAL(overrides?: CallOverrides): Promise<BigNumber>;

    claimCreatorReward(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimLotteryReward(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimWinnerPrize(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createGame(
      _prizeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    creatorRewardList(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endGame(
      _gameId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeToken(overrides?: CallOverrides): Promise<BigNumber>;

    gameIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    games(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGameParticipantList(
      _gameId: PromiseOrValue<BigNumberish>,
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLotteryInfo(
      _gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    joinGame(
      _gameId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lotteryRewardList(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    prizeToken(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakingPool(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    userParticipationAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    winnerPrizeList(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_FEE_INCREASE_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_GAME_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FEE_TOKEN_DECIMAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRIZE_DISTRIBUTION_GAME_CREATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRIZE_DISTRIBUTION_LOTTERY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRIZE_DISTRIBUTION_TOKEN_STACKERS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRIZE_DISTRIBUTION_TREASURY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRIZE_TOKEN_DECIMAL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimCreatorReward(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimLotteryReward(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimWinnerPrize(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createGame(
      _prizeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    creatorRewardList(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endGame(
      _gameId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameIdCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    games(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGameParticipantList(
      _gameId: PromiseOrValue<BigNumberish>,
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLotteryInfo(
      _gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initFeeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    joinGame(
      _gameId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lotteryRewardList(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prizeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakingPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userParticipationAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    winnerPrizeList(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
